/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * server.API
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  PostAudioRoomIdUploadBody,
  RequestCreateQuestionJson,
  RequestRoomCreateJson,
  ResponseAudioJson,
  ResponseErrorJson,
  ResponseQuestionJson,
  ResponseRoomJson
} from './serverAPI.schemas';

import { customInstance } from '../mutator/custom-instance';




export const postAudioRoomIdUpload = (
    roomId: string,
    postAudioRoomIdUploadBody: PostAudioRoomIdUploadBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postAudioRoomIdUploadBody.audioFile !== undefined) {
 formData.append(`audioFile`, postAudioRoomIdUploadBody.audioFile)
 }

      return customInstance<ResponseAudioJson>(
      {url: `/audio/${roomId}/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostAudioRoomIdUploadMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAudioRoomIdUpload>>, TError,{roomId: string;data: PostAudioRoomIdUploadBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAudioRoomIdUpload>>, TError,{roomId: string;data: PostAudioRoomIdUploadBody}, TContext> => {

const mutationKey = ['postAudioRoomIdUpload'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAudioRoomIdUpload>>, {roomId: string;data: PostAudioRoomIdUploadBody}> = (props) => {
          const {roomId,data} = props ?? {};

          return  postAudioRoomIdUpload(roomId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAudioRoomIdUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postAudioRoomIdUpload>>>
    export type PostAudioRoomIdUploadMutationBody = PostAudioRoomIdUploadBody
    export type PostAudioRoomIdUploadMutationError = ResponseErrorJson

    export const usePostAudioRoomIdUpload = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAudioRoomIdUpload>>, TError,{roomId: string;data: PostAudioRoomIdUploadBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAudioRoomIdUpload>>,
        TError,
        {roomId: string;data: PostAudioRoomIdUploadBody},
        TContext
      > => {

      const mutationOptions = getPostAudioRoomIdUploadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getQuestionsRoomIdList = (
    roomId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseQuestionJson[]>(
      {url: `/questions/${roomId}/list`, method: 'GET', signal
    },
      );
    }
  

export const getGetQuestionsRoomIdListQueryKey = (roomId: string,) => {
    return [`/questions/${roomId}/list`] as const;
    }

    
export const getGetQuestionsRoomIdListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getQuestionsRoomIdList>>>, TError = unknown>(roomId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQuestionsRoomIdListQueryKey(roomId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getQuestionsRoomIdList>>> = ({ signal }) => getQuestionsRoomIdList(roomId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(roomId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetQuestionsRoomIdListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getQuestionsRoomIdList>>>
export type GetQuestionsRoomIdListInfiniteQueryError = unknown


export function useGetQuestionsRoomIdListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getQuestionsRoomIdList>>>, TError = unknown>(
 roomId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQuestionsRoomIdList>>,
          TError,
          Awaited<ReturnType<typeof getQuestionsRoomIdList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetQuestionsRoomIdListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getQuestionsRoomIdList>>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQuestionsRoomIdList>>,
          TError,
          Awaited<ReturnType<typeof getQuestionsRoomIdList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetQuestionsRoomIdListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getQuestionsRoomIdList>>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetQuestionsRoomIdListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getQuestionsRoomIdList>>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetQuestionsRoomIdListInfiniteQueryOptions(roomId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetQuestionsRoomIdListQueryOptions = <TData = Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError = unknown>(roomId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQuestionsRoomIdListQueryKey(roomId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getQuestionsRoomIdList>>> = ({ signal }) => getQuestionsRoomIdList(roomId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(roomId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetQuestionsRoomIdListQueryResult = NonNullable<Awaited<ReturnType<typeof getQuestionsRoomIdList>>>
export type GetQuestionsRoomIdListQueryError = unknown


export function useGetQuestionsRoomIdList<TData = Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError = unknown>(
 roomId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQuestionsRoomIdList>>,
          TError,
          Awaited<ReturnType<typeof getQuestionsRoomIdList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetQuestionsRoomIdList<TData = Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQuestionsRoomIdList>>,
          TError,
          Awaited<ReturnType<typeof getQuestionsRoomIdList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetQuestionsRoomIdList<TData = Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetQuestionsRoomIdList<TData = Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionsRoomIdList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetQuestionsRoomIdListQueryOptions(roomId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postQuestionsRoomIdCreate = (
    roomId: string,
    requestCreateQuestionJson: RequestCreateQuestionJson,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseQuestionJson[]>(
      {url: `/questions/${roomId}/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestCreateQuestionJson, signal
    },
      );
    }
  


export const getPostQuestionsRoomIdCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQuestionsRoomIdCreate>>, TError,{roomId: string;data: RequestCreateQuestionJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postQuestionsRoomIdCreate>>, TError,{roomId: string;data: RequestCreateQuestionJson}, TContext> => {

const mutationKey = ['postQuestionsRoomIdCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postQuestionsRoomIdCreate>>, {roomId: string;data: RequestCreateQuestionJson}> = (props) => {
          const {roomId,data} = props ?? {};

          return  postQuestionsRoomIdCreate(roomId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostQuestionsRoomIdCreateMutationResult = NonNullable<Awaited<ReturnType<typeof postQuestionsRoomIdCreate>>>
    export type PostQuestionsRoomIdCreateMutationBody = RequestCreateQuestionJson
    export type PostQuestionsRoomIdCreateMutationError = unknown

    export const usePostQuestionsRoomIdCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQuestionsRoomIdCreate>>, TError,{roomId: string;data: RequestCreateQuestionJson}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postQuestionsRoomIdCreate>>,
        TError,
        {roomId: string;data: RequestCreateQuestionJson},
        TContext
      > => {

      const mutationOptions = getPostQuestionsRoomIdCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getRoomsList = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseRoomJson[]>(
      {url: `/rooms/list`, method: 'GET', signal
    },
      );
    }
  

export const getGetRoomsListQueryKey = () => {
    return [`/rooms/list`] as const;
    }

    
export const getGetRoomsListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getRoomsList>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoomsListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoomsList>>> = ({ signal }) => getRoomsList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoomsListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getRoomsList>>>
export type GetRoomsListInfiniteQueryError = unknown


export function useGetRoomsListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsList>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsList>>,
          TError,
          Awaited<ReturnType<typeof getRoomsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsList>>,
          TError,
          Awaited<ReturnType<typeof getRoomsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetRoomsListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoomsListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetRoomsListQueryOptions = <TData = Awaited<ReturnType<typeof getRoomsList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoomsListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoomsList>>> = ({ signal }) => getRoomsList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoomsListQueryResult = NonNullable<Awaited<ReturnType<typeof getRoomsList>>>
export type GetRoomsListQueryError = unknown


export function useGetRoomsList<TData = Awaited<ReturnType<typeof getRoomsList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsList>>,
          TError,
          Awaited<ReturnType<typeof getRoomsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsList<TData = Awaited<ReturnType<typeof getRoomsList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsList>>,
          TError,
          Awaited<ReturnType<typeof getRoomsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsList<TData = Awaited<ReturnType<typeof getRoomsList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetRoomsList<TData = Awaited<ReturnType<typeof getRoomsList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoomsListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getRoomsRoomIdGetbyid = (
    roomId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseRoomJson>(
      {url: `/rooms/${roomId}/getbyid`, method: 'GET', signal
    },
      );
    }
  

export const getGetRoomsRoomIdGetbyidQueryKey = (roomId: string,) => {
    return [`/rooms/${roomId}/getbyid`] as const;
    }

    
export const getGetRoomsRoomIdGetbyidInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>>, TError = unknown>(roomId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoomsRoomIdGetbyidQueryKey(roomId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>> = ({ signal }) => getRoomsRoomIdGetbyid(roomId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(roomId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoomsRoomIdGetbyidInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>>
export type GetRoomsRoomIdGetbyidInfiniteQueryError = unknown


export function useGetRoomsRoomIdGetbyidInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>>, TError = unknown>(
 roomId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>,
          TError,
          Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsRoomIdGetbyidInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>,
          TError,
          Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsRoomIdGetbyidInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetRoomsRoomIdGetbyidInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoomsRoomIdGetbyidInfiniteQueryOptions(roomId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetRoomsRoomIdGetbyidQueryOptions = <TData = Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError = unknown>(roomId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoomsRoomIdGetbyidQueryKey(roomId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>> = ({ signal }) => getRoomsRoomIdGetbyid(roomId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(roomId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoomsRoomIdGetbyidQueryResult = NonNullable<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>>
export type GetRoomsRoomIdGetbyidQueryError = unknown


export function useGetRoomsRoomIdGetbyid<TData = Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError = unknown>(
 roomId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>,
          TError,
          Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsRoomIdGetbyid<TData = Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>,
          TError,
          Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsRoomIdGetbyid<TData = Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetRoomsRoomIdGetbyid<TData = Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError = unknown>(
 roomId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsRoomIdGetbyid>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoomsRoomIdGetbyidQueryOptions(roomId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postRoomsCreate = (
    requestRoomCreateJson: RequestRoomCreateJson,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseRoomJson>(
      {url: `/rooms/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestRoomCreateJson, signal
    },
      );
    }
  


export const getPostRoomsCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoomsCreate>>, TError,{data: RequestRoomCreateJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postRoomsCreate>>, TError,{data: RequestRoomCreateJson}, TContext> => {

const mutationKey = ['postRoomsCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoomsCreate>>, {data: RequestRoomCreateJson}> = (props) => {
          const {data} = props ?? {};

          return  postRoomsCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRoomsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof postRoomsCreate>>>
    export type PostRoomsCreateMutationBody = RequestRoomCreateJson
    export type PostRoomsCreateMutationError = unknown

    export const usePostRoomsCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoomsCreate>>, TError,{data: RequestRoomCreateJson}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postRoomsCreate>>,
        TError,
        {data: RequestRoomCreateJson},
        TContext
      > => {

      const mutationOptions = getPostRoomsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
