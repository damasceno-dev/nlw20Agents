/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * server.API
 * OpenAPI spec version: 1.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import { customInstance } from '../mutator/custom-instance';
import type {
  ResponseRoomJson
} from './serverAPI.schemas';




export const getHealthcheck = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: '/healthcheck', method: 'GET', signal
    },
      );
    }
  

export const getGetHealthcheckQueryKey = () => {
    return ['/healthcheck'] as const;
    }

    
export const getGetHealthcheckInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getHealthcheck>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthcheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealthcheck>>> = ({ signal }) => getHealthcheck(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHealthcheckInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getHealthcheck>>>
export type GetHealthcheckInfiniteQueryError = unknown


export function useGetHealthcheckInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealthcheck>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealthcheck>>,
          TError,
          Awaited<ReturnType<typeof getHealthcheck>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthcheckInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealthcheck>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealthcheck>>,
          TError,
          Awaited<ReturnType<typeof getHealthcheck>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthcheckInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealthcheck>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetHealthcheckInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealthcheck>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHealthcheckInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetHealthcheckQueryOptions = <TData = Awaited<ReturnType<typeof getHealthcheck>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthcheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealthcheck>>> = ({ signal }) => getHealthcheck(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHealthcheckQueryResult = NonNullable<Awaited<ReturnType<typeof getHealthcheck>>>
export type GetHealthcheckQueryError = unknown


export function useGetHealthcheck<TData = Awaited<ReturnType<typeof getHealthcheck>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealthcheck>>,
          TError,
          Awaited<ReturnType<typeof getHealthcheck>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthcheck<TData = Awaited<ReturnType<typeof getHealthcheck>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealthcheck>>,
          TError,
          Awaited<ReturnType<typeof getHealthcheck>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthcheck<TData = Awaited<ReturnType<typeof getHealthcheck>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetHealthcheck<TData = Awaited<ReturnType<typeof getHealthcheck>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthcheck>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHealthcheckQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getRoomsGetall = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseRoomJson[]>(
      {url: '/rooms/getall', method: 'GET', signal
    },
      );
    }
  

export const getGetRoomsGetallQueryKey = () => {
    return ['/rooms/getall'] as const;
    }

    
export const getGetRoomsGetallInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getRoomsGetall>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoomsGetallQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoomsGetall>>> = ({ signal }) => getRoomsGetall(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoomsGetallInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getRoomsGetall>>>
export type GetRoomsGetallInfiniteQueryError = unknown


export function useGetRoomsGetallInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsGetall>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsGetall>>,
          TError,
          Awaited<ReturnType<typeof getRoomsGetall>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsGetallInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsGetall>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsGetall>>,
          TError,
          Awaited<ReturnType<typeof getRoomsGetall>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsGetallInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsGetall>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetRoomsGetallInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoomsGetall>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoomsGetallInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetRoomsGetallQueryOptions = <TData = Awaited<ReturnType<typeof getRoomsGetall>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoomsGetallQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoomsGetall>>> = ({ signal }) => getRoomsGetall(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoomsGetallQueryResult = NonNullable<Awaited<ReturnType<typeof getRoomsGetall>>>
export type GetRoomsGetallQueryError = unknown


export function useGetRoomsGetall<TData = Awaited<ReturnType<typeof getRoomsGetall>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsGetall>>,
          TError,
          Awaited<ReturnType<typeof getRoomsGetall>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsGetall<TData = Awaited<ReturnType<typeof getRoomsGetall>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoomsGetall>>,
          TError,
          Awaited<ReturnType<typeof getRoomsGetall>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoomsGetall<TData = Awaited<ReturnType<typeof getRoomsGetall>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetRoomsGetall<TData = Awaited<ReturnType<typeof getRoomsGetall>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomsGetall>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoomsGetallQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




