name: Deploy to Private Amazon ECR

on:
  push:
    branches:
      - main  # Runs when pushing to the main branch

jobs:
  deploy:
    name: Build and Push to Private ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create appsettings.Production.json file 
        run: | 
          # Decode the Base64-encoded JSON string from secrets to create the configuration file 
          echo "${{ secrets.APPSETTINGS_PRODUCTION_JSON_B64 }}" | base64 -d > server.API/appsettings.Production.json 
        
      - name: Validate JSON configuration 
        run: | 
          # Use jq to parse the JSON file; this will error out if the JSON is invalid. 
          jq . server.API/appsettings.Production.json

      - name: Load AWS Credentials from appsettings
        run: |
          # Extract AWS credentials from appsettings.Production.json
          AWS_REGION=$(jq -r '.AwsCredentials.AwsRegion' server.API/appsettings.Production.json)
          AWS_ACCESS_KEY_ID=$(jq -r '.AwsCredentials.AwsResourcesCreatorAccessKeyId' server.API/appsettings.Production.json)
          AWS_SECRET_ACCESS_KEY=$(jq -r '.AwsCredentials.AwsResourcesCreatorSecretKey' server.API/appsettings.Production.json)
          AWS_ECR_URL=$(jq -r '.AwsCredentials.AwsEcrUrl' server.API/appsettings.Production.json)
          
          # Persist AWS credentials for subsequent steps
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV
          echo "AWS_ECR_URL=${AWS_ECR_URL}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get short commit hash
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short=7 HEAD)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: $(echo ${{ env.AWS_ECR_URL }} | awk -F'/' '{print $NF}')
          IMAGE_TAG: ${{ env.SHORT_SHA }}
        run: |
          # Extract repository name from ECR URL
          REPO_NAME=$(echo ${{ env.AWS_ECR_URL }} | awk -F'/' '{print $NF}')
          
          # Build the Docker image
          docker build -t ${{ env.AWS_ECR_URL }}:latest -t ${{ env.AWS_ECR_URL }}:${{ env.SHORT_SHA }} -f server.Infrastructure/Dockerfile .
          
          # Push both tags
          docker push ${{ env.AWS_ECR_URL }}:latest
          docker push ${{ env.AWS_ECR_URL }}:${{ env.SHORT_SHA }}

      - name: Verify Pushed Images
        run: |
          echo "Successfully pushed images to ECR:"
          echo " - ${{ env.AWS_ECR_URL }}:latest"
          echo " - ${{ env.AWS_ECR_URL }}:${{ env.SHORT_SHA }}"
          
          # List images in the repository
          REPO_NAME=$(echo ${{ env.AWS_ECR_URL }} | awk -F'/' '{print $NF}')
          aws ecr list-images --repository-name ${REPO_NAME} --region ${{ env.AWS_REGION }}