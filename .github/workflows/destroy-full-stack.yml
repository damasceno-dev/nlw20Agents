name: "Destroy Full Stack"

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  validate_confirmation:
    name: "Validate Destruction Confirmation"
    runs-on: ubuntu-latest
    outputs:
      confirmed: ${{ steps.validate.outputs.confirmed }}
      oidc_role_arn: ${{ steps.get_oidc_role.outputs.role_arn }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate Confirmation
        id: validate
        run: |
          if [[ "${{ github.event.inputs.confirm_destroy }}" == "DESTROY" ]]; then
            echo "confirmed=true" >> $GITHUB_OUTPUT
            echo "✅ Destruction confirmed. Proceeding with teardown..."
          else
            echo "confirmed=false" >> $GITHUB_OUTPUT
            echo "❌ Confirmation failed. You must type 'DESTROY' to proceed."
            exit 1
          fi

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Get OIDC Role ARN
        id: get_oidc_role
        working-directory: infra/1-oidc
        run: |
          terraform init -reconfigure
          OIDC_ROLE_ARN=$(terraform output -raw github_role_arn)
          echo "role_arn=${OIDC_ROLE_ARN}" >> $GITHUB_OUTPUT
          echo "OIDC_ROLE_ARN=${OIDC_ROLE_ARN}" >> $GITHUB_ENV

  destroy_app_runner:
    name: "Destroy App Runner"
    runs-on: ubuntu-latest
    needs: validate_confirmation
    if: ${{ needs.validate_confirmation.outputs.confirmed == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.validate_confirmation.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DestroyAppRunner

      - name: Terraform Init & Destroy (App Runner)
        working-directory: infra/3-apprunner
        run: |
          terraform init -reconfigure
          terraform destroy -auto-approve

  destroy_resources:
    name: "Destroy AWS Resources"
    runs-on: ubuntu-latest
    needs: [validate_confirmation, destroy_app_runner]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_DB_PASSWORD=${TF_VAR_DB_PASSWORD}" >> $GITHUB_ENV
          
          cat <<EOF > infra/2-resources/terraform.tfvars
          db_password = "${TF_VAR_DB_PASSWORD}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.validate_confirmation.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DestroyResources

      - name: Terraform Init & Destroy (Resources)
        working-directory: infra/2-resources
        run: |
          if [ -f "terraform.tfstate" ]; then
            terraform init -migrate-state -force-copy
          else
            terraform init -reconfigure
          fi
          terraform destroy -auto-approve -var-file=terraform.tfvars

  destroy_admin:
    name: "Destroy Admin Infrastructure"
    runs-on: ubuntu-latest
    needs: [validate_confirmation, destroy_resources]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          
          cat <<EOF > infra/1-admin/terraform.tfvars
          prefix = "${TF_VAR_PREFIX}"
          resources_creator_profile = "resources-creator"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.validate_confirmation.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DestroyAdmin

      - name: Terraform Init & Destroy (Admin)
        working-directory: infra/1-admin
        run: |
          terraform init -reconfigure
          terraform destroy -auto-approve -var-file=terraform.tfvars

  cleanup_prerequisites:
    name: "Cleanup Prerequisites (S3 State Bucket & Temp IAM Users)"
    runs-on: ubuntu-latest
    needs: [validate_confirmation, destroy_admin]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.validate_confirmation.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-CleanupPrereqs

      - name: Delete S3 Terraform State Bucket(s) if exist
        env:
          PREFIX: ${{ env.TF_VAR_PREFIX }}
        run: |
          set -euo pipefail
          echo "Looking for S3 buckets starting with: ${PREFIX}-terraform-state-"
          BUCKETS=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, \`${PREFIX}-terraform-state-\`)].Name" --output text || true)
          if [ -z "$BUCKETS" ]; then
            echo "No matching state buckets found."
          else
            for B in $BUCKETS; do
              echo "Deleting bucket: $B (force, will remove all objects and versions)"
              # Ensure bucket is in our region; if not, still attempt deletion (S3 is global but location matters for some APIs)
              aws s3 rb s3://$B --force || echo "Warning: failed to delete $B (may not exist or already deleted)"
            done
          fi

      - name: Delete temporary IAM users if exist
        env:
          PREFIX: ${{ env.TF_VAR_PREFIX }}
        run: |
          set -euo pipefail
          echo "Looking for IAM users starting with: temp-setup-${PREFIX}-"
          USERS=$(aws iam list-users --query "Users[?starts_with(UserName, \`temp-setup-${PREFIX}-\`)].UserName" --output text || true)
          if [ -z "$USERS" ]; then
            echo "No matching temp setup users found."
          else
            for U in $USERS; do
              echo "Cleaning up IAM user: $U"
              # Delete access keys
              KEYS=$(aws iam list-access-keys --user-name "$U" --query 'AccessKeyMetadata[].AccessKeyId' --output text || true)
              for K in $KEYS; do
                echo "- Deleting access key $K"
                aws iam delete-access-key --user-name "$U" --access-key-id "$K" || true
              done
              # Detach managed policies
              POLS=$(aws iam list-attached-user-policies --user-name "$U" --query 'AttachedPolicies[].PolicyArn' --output text || true)
              for P in $POLS; do
                echo "- Detaching policy $P"
                aws iam detach-user-policy --user-name "$U" --policy-arn "$P" || true
              done
              # Remove inline policies
              INLINES=$(aws iam list-user-policies --user-name "$U" --query 'PolicyNames[]' --output text || true)
              for IP in $INLINES; do
                echo "- Deleting inline policy $IP"
                aws iam delete-user-policy --user-name "$U" --policy-name "$IP" || true
              done
              # Remove from groups
              GROUPS=$(aws iam list-groups-for-user --user-name "$U" --query 'Groups[].GroupName' --output text || true)
              for G in $GROUPS; do
                echo "- Removing from group $G"
                aws iam remove-user-from-group --user-name "$U" --group-name "$G" || true
              done
              # Delete login profile if exists
              echo "- Deleting login profile (if any)"
              aws iam delete-login-profile --user-name "$U" || true
              # Finally delete the user
              echo "- Deleting user $U"
              aws iam delete-user --user-name "$U" || true
            done
          fi

  destroy_oidc:
    name: "Destroy OIDC Infrastructure"
    runs-on: ubuntu-latest
    needs: [validate_confirmation, destroy_admin, cleanup_prerequisites]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          echo "GITHUB_ORG=${GITHUB_ORG}" >> $GITHUB_ENV
          echo "GITHUB_REPO=${GITHUB_REPO}" >> $GITHUB_ENV
          
          cat <<EOF > infra/1-oidc/terraform.tfvars
          prefix = "${TF_VAR_PREFIX}"
          github_org = "${GITHUB_ORG}"
          github_repo = "${GITHUB_REPO}"
          aws_region = "${AWS_REGION}"
          aws_account_id = "${AWS_ACCOUNT_ID}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.validate_confirmation.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DestroyOIDC

      - name: Terraform Init & Destroy (OIDC)
        working-directory: infra/1-oidc
        run: |
          terraform init -reconfigure
          terraform destroy -auto-approve -var-file=terraform.tfvars

  cleanup_summary:
    name: "Destruction Summary"
    runs-on: ubuntu-latest
    needs: [destroy_oidc]
    steps:
      - name: Summary
        run: |
          echo "## 🗑️ Complete Infrastructure Destroyed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All AWS resources have been successfully destroyed using OIDC authentication." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Resources Removed:" >> $GITHUB_STEP_SUMMARY
          echo "- App Runner Service" >> $GITHUB_STEP_SUMMARY
          echo "- Aurora Database & VPC" >> $GITHUB_STEP_SUMMARY
          echo "- ECR Repository" >> $GITHUB_STEP_SUMMARY
          echo "- IAM Roles and Policies" >> $GITHUB_STEP_SUMMARY
          echo "- OIDC Provider & GitHub Role" >> $GITHUB_STEP_SUMMARY
          echo "- Terraform State S3 Bucket(s) (if any)" >> $GITHUB_STEP_SUMMARY
          echo "- Temporary IAM setup user(s) (if any)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 Security Benefits Used:" >> $GITHUB_STEP_SUMMARY
          echo "- No AWS credentials stored in GitHub" >> $GITHUB_STEP_SUMMARY
          echo "- Temporary credentials with 1-hour TTL" >> $GITHUB_STEP_SUMMARY
          echo "- Complete audit trail in CloudWatch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Note**: Verify in AWS Console that all resources are removed" >> $GITHUB_STEP_SUMMARY