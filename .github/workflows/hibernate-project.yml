name: "Hibernate Project"

on:
  workflow_dispatch:
    inputs:
      confirm_hibernate:
        description: 'Type "HIBERNATE" to confirm project hibernation'
        required: true
        type: string
      cleanup_oidc_role:
        description: 'Also cleanup OIDC role (recommended for long-term hibernation)'
        required: true
        type: boolean
        default: true
      keep_oidc_provider:
        description: 'Keep shared OIDC provider (recommended if other projects use it)'
        required: true
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read

jobs:
  validate_confirmation:
    name: "Validate Hibernation Confirmation"
    runs-on: ubuntu-latest
    outputs:
      confirmed: ${{ steps.validate.outputs.confirmed }}
      oidc_role_arn: ${{ steps.get_oidc_role.outputs.role_arn }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate Confirmation
        id: validate
        run: |
          if [[ "${{ github.event.inputs.confirm_hibernate }}" == "HIBERNATE" ]]; then
            echo "confirmed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Hibernation confirmed. Proceeding with cost-optimized shutdown..."
          else
            echo "confirmed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Confirmation failed. You must type 'HIBERNATE' to proceed."
            exit 1
          fi

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Get OIDC Role ARN
        id: get_oidc_role
        working-directory: infra/1-oidc
        run: |
          terraform init -reconfigure
          OIDC_ROLE_ARN=$(terraform output -raw github_deploy_role_arn 2>/dev/null || echo "")
          if [ -n "$OIDC_ROLE_ARN" ]; then
            echo "role_arn=${OIDC_ROLE_ARN}" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No OIDC role found - may already be cleaned up"
            echo "role_arn=" >> $GITHUB_OUTPUT
          fi

  # Step 1: Destroy expensive resources first
  hibernate_app_runner:
    name: "üèÉ‚Äç‚ôÇÔ∏è Hibernate App Runner"
    runs-on: ubuntu-latest
    needs: validate_confirmation
    if: ${{ needs.validate_confirmation.outputs.confirmed == 'true' && needs.validate_confirmation.outputs.oidc_role_arn != '' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.validate_confirmation.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-HibernateAppRunner

      - name: Terraform Destroy App Runner
        working-directory: infra/3-apprunner
        run: |
          terraform init -reconfigure
          terraform destroy -auto-approve
          echo "üí§ App Runner hibernated - no more compute costs"

  hibernate_resources:
    name: "üóÑÔ∏è Hibernate AWS Resources"
    runs-on: ubuntu-latest
    needs: [validate_confirmation, hibernate_app_runner]
    if: ${{ needs.validate_confirmation.outputs.confirmed == 'true' && needs.validate_confirmation.outputs.oidc_role_arn != '' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_DB_PASSWORD=${TF_VAR_DB_PASSWORD}" >> $GITHUB_ENV
          
          cat <<EOF > infra/2-resources/terraform.tfvars
          db_password = "${TF_VAR_DB_PASSWORD}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.validate_confirmation.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-HibernateResources

      - name: Terraform Destroy Resources
        working-directory: infra/2-resources
        run: |
          terraform init -reconfigure
          terraform destroy -auto-approve -var-file=terraform.tfvars
          echo "üí§ RDS, VPC, ECR hibernated - major cost savings achieved"

  hibernate_admin:
    name: "üë• Hibernate Admin Infrastructure"
    runs-on: ubuntu-latest
    needs: [validate_confirmation, hibernate_resources]
    if: ${{ needs.validate_confirmation.outputs.confirmed == 'true' && needs.validate_confirmation.outputs.oidc_role_arn != '' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          
          cat <<EOF > infra/1-admin/terraform.tfvars
          prefix = "${TF_VAR_PREFIX}"
          resources_creator_profile = "resources-creator"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.validate_confirmation.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-HibernateAdmin

      - name: Terraform Destroy Admin
        working-directory: infra/1-admin
        run: |
          terraform init -reconfigure
          terraform destroy -auto-approve -var-file=terraform.tfvars
          echo "üí§ Admin infrastructure hibernated"

  # Step 2: Optionally cleanup OIDC role FIRST (while S3 backend still exists)
  cleanup_oidc_role:
    name: "üîê Cleanup OIDC Role"
    runs-on: ubuntu-latest
    needs: [validate_confirmation, hibernate_admin]
    if: ${{ needs.validate_confirmation.outputs.confirmed == 'true' && github.event.inputs.cleanup_oidc_role == 'true' && needs.validate_confirmation.outputs.oidc_role_arn != '' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          echo "GITHUB_ORG=${GITHUB_ORG}" >> $GITHUB_ENV
          echo "GITHUB_REPO=${GITHUB_REPO}" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.validate_confirmation.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-CleanupOIDC

      - name: Configure Terraform Backend (S3 - normal cleanup)
        working-directory: infra/1-oidc
        run: |
          cat <<EOF > backend.tf
          terraform {
            backend "s3" {
              bucket = "${TF_VAR_PREFIX}-terraform-state-unique1029"
              key    = "oidc/terraform.tfstate"
              region = "${AWS_REGION}"
            }
          }
          EOF
          echo "‚úÖ Using S3 backend for proper OIDC cleanup"

      - name: Configure Terraform Variables
        run: |
          cat <<EOF > infra/1-oidc/terraform.tfvars
          prefix = "${TF_VAR_PREFIX}"
          github_org = "${GITHUB_ORG}"
          github_repo = "${GITHUB_REPO}"
          aws_region = "${AWS_REGION}"
          aws_account_id = "${AWS_ACCOUNT_ID}"
          EOF

      - name: Selective OIDC Destroy
        working-directory: infra/1-oidc
        run: |
          terraform init -reconfigure
          
          if [ "${{ github.event.inputs.keep_oidc_provider }}" == "true" ]; then
            echo "üóëÔ∏è Destroying only project role (keeping shared OIDC provider)..."
            # Target only role and attachments
            terraform destroy -auto-approve -var-file=terraform.tfvars \
              -target=aws_iam_role.github_deploy \
              -target=aws_iam_role_policy_attachment.attach_vpc \
              -target=aws_iam_role_policy_attachment.attach_rds \
              -target=aws_iam_role_policy_attachment.attach_ecr \
              -target=aws_iam_role_policy_attachment.attach_app_runner \
              -target=aws_iam_role_policy_attachment.attach_iam \
              -target=aws_iam_role_policy_attachment.attach_s3 \
              -target=aws_iam_role_policy_attachment.attach_cloudwatch \
              -target=aws_iam_role_policy_attachment.attach_sqs
          else
            echo "üóëÔ∏è Destroying project role AND shared OIDC provider..."
            terraform destroy -auto-approve -var-file=terraform.tfvars
          fi
          
          echo "üîê OIDC cleanup complete"

      - name: Delete S3 Terraform State Bucket(s) after OIDC cleanup
        env:
          PREFIX: ${{ env.TF_VAR_PREFIX }}
        run: |
          set -euo pipefail
          echo "üóÑÔ∏è Cleaning up S3 state buckets after OIDC role deletion..."
          echo "Looking for S3 buckets starting with: ${PREFIX}-terraform-state-"
          BUCKETS=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, \`${PREFIX}-terraform-state-\`)].Name" --output text || true)
          if [ -z "$BUCKETS" ]; then
            echo "No matching state buckets found."
          else
            for B in $BUCKETS; do
              echo "Deleting bucket: $B (handling versioning and objects)"
              
              # Check if bucket exists (might have been deleted by another process)
              if ! aws s3api head-bucket --bucket "$B" 2>/dev/null; then
                echo "Bucket $B does not exist, skipping"
                continue
              fi
              
              # Delete all object versions (including delete markers)
              echo "- Deleting all object versions and delete markers..."
              aws s3api list-object-versions --bucket "$B" \
                --query 'Versions[].[Key,VersionId]' --output text | \
                while read key version; do
                  if [ -n "$key" ] && [ -n "$version" ]; then
                    aws s3api delete-object --bucket "$B" --key "$key" --version-id "$version" || true
                  fi
                done
              
              # Delete delete markers
              aws s3api list-object-versions --bucket "$B" \
                --query 'DeleteMarkers[].[Key,VersionId]' --output text | \
                while read key version; do
                  if [ -n "$key" ] && [ -n "$version" ]; then
                    aws s3api delete-object --bucket "$B" --key "$key" --version-id "$version" || true
                  fi
                done
              
              # Now delete the empty bucket
              echo "- Deleting empty bucket..."
              aws s3api delete-bucket --bucket "$B" || echo "Warning: failed to delete bucket $B"
            done
            echo "üí§ S3 Terraform state buckets cleaned up after OIDC deletion"
          fi

      - name: Delete temporary IAM users if exist
        env:
          PREFIX: ${{ env.TF_VAR_PREFIX }}
        run: |
          set -euo pipefail
          echo "Looking for IAM users starting with: temp-setup-${PREFIX}-"
          USERS=$(aws iam list-users --query "Users[?starts_with(UserName, \`temp-setup-${PREFIX}-\`)].UserName" --output text || true)
          if [ -z "$USERS" ]; then
            echo "No matching temp setup users found."
          else
            for U in $USERS; do
              echo "Cleaning up IAM user: $U"
              # Delete access keys
              KEYS=$(aws iam list-access-keys --user-name "$U" --query 'AccessKeyMetadata[].AccessKeyId' --output text || true)
              for K in $KEYS; do
                echo "- Deleting access key $K"
                aws iam delete-access-key --user-name "$U" --access-key-id "$K" || true
              done
              # Detach managed policies
              POLS=$(aws iam list-attached-user-policies --user-name "$U" --query 'AttachedPolicies[].PolicyArn' --output text || true)
              for P in $POLS; do
                echo "- Detaching policy $P"
                aws iam detach-user-policy --user-name "$U" --policy-arn "$P" || true
              done
              # Remove inline policies
              INLINES=$(aws iam list-user-policies --user-name "$U" --query 'PolicyNames[]' --output text || true)
              for IP in $INLINES; do
                echo "- Deleting inline policy $IP"
                aws iam delete-user-policy --user-name "$U" --policy-name "$IP" || true
              done
              # Remove from groups
              GROUPS=$(aws iam list-groups-for-user --user-name "$U" --query 'Groups[].GroupName' --output text || true)
              for G in $GROUPS; do
                echo "- Removing from group $G"
                aws iam remove-user-from-group --user-name "$U" --group-name "$G" || true
              done
              # Delete login profile if exists
              echo "- Deleting login profile (if any)"
              aws iam delete-login-profile --user-name "$U" || true
              # Finally delete the user
              echo "- Deleting user $U"
              aws iam delete-user --user-name "$U" || true
            done
            echo "üí§ Temporary IAM users cleaned up"
          fi

  # Step 3: Cleanup S3 state bucket and temp resources (only if OIDC role still exists)
  cleanup_state_bucket:
    name: "üóÑÔ∏è Cleanup State Bucket & Temp Users"
    runs-on: ubuntu-latest
    needs: [validate_confirmation, hibernate_admin]
    if: ${{ needs.validate_confirmation.outputs.confirmed == 'true' && github.event.inputs.cleanup_oidc_role == 'false' && needs.validate_confirmation.outputs.oidc_role_arn != '' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.validate_confirmation.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-CleanupState

      - name: Delete S3 Terraform State Bucket(s) if exist
        env:
          PREFIX: ${{ env.TF_VAR_PREFIX }}
        run: |
          set -euo pipefail
          echo "Looking for S3 buckets starting with: ${PREFIX}-terraform-state-"
          BUCKETS=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, \`${PREFIX}-terraform-state-\`)].Name" --output text || true)
          if [ -z "$BUCKETS" ]; then
            echo "No matching state buckets found."
          else
            for B in $BUCKETS; do
              echo "Deleting bucket: $B (handling versioning and objects)"
              
              # Check if bucket exists (might have been deleted by another process)
              if ! aws s3api head-bucket --bucket "$B" 2>/dev/null; then
                echo "Bucket $B does not exist, skipping"
                continue
              fi
              
              # Delete all object versions (including delete markers)
              echo "- Deleting all object versions and delete markers..."
              aws s3api list-object-versions --bucket "$B" \
                --query 'Versions[].[Key,VersionId]' --output text | \
                while read key version; do
                  if [ -n "$key" ] && [ -n "$version" ]; then
                    aws s3api delete-object --bucket "$B" --key "$key" --version-id "$version" || true
                  fi
                done
              
              # Delete delete markers
              aws s3api list-object-versions --bucket "$B" \
                --query 'DeleteMarkers[].[Key,VersionId]' --output text | \
                while read key version; do
                  if [ -n "$key" ] && [ -n "$version" ]; then
                    aws s3api delete-object --bucket "$B" --key "$key" --version-id "$version" || true
                  fi
                done
              
              # Now delete the empty bucket
              echo "- Deleting empty bucket..."
              aws s3api delete-bucket --bucket "$B" || echo "Warning: failed to delete bucket $B"
            done
            echo "üí§ Terraform state buckets cleaned up"
          fi

      - name: Delete temporary IAM users if exist
        env:
          PREFIX: ${{ env.TF_VAR_PREFIX }}
        run: |
          set -euo pipefail
          echo "Looking for IAM users starting with: temp-setup-${PREFIX}-"
          USERS=$(aws iam list-users --query "Users[?starts_with(UserName, \`temp-setup-${PREFIX}-\`)].UserName" --output text || true)
          if [ -z "$USERS" ]; then
            echo "No matching temp setup users found."
          else
            for U in $USERS; do
              echo "Cleaning up IAM user: $U"
              # Delete access keys
              KEYS=$(aws iam list-access-keys --user-name "$U" --query 'AccessKeyMetadata[].AccessKeyId' --output text || true)
              for K in $KEYS; do
                echo "- Deleting access key $K"
                aws iam delete-access-key --user-name "$U" --access-key-id "$K" || true
              done
              # Detach managed policies
              POLS=$(aws iam list-attached-user-policies --user-name "$U" --query 'AttachedPolicies[].PolicyArn' --output text || true)
              for P in $POLS; do
                echo "- Detaching policy $P"
                aws iam detach-user-policy --user-name "$U" --policy-arn "$P" || true
              done
              # Remove inline policies
              INLINES=$(aws iam list-user-policies --user-name "$U" --query 'PolicyNames[]' --output text || true)
              for IP in $INLINES; do
                echo "- Deleting inline policy $IP"
                aws iam delete-user-policy --user-name "$U" --policy-name "$IP" || true
              done
              # Remove from groups
              GROUPS=$(aws iam list-groups-for-user --user-name "$U" --query 'Groups[].GroupName' --output text || true)
              for G in $GROUPS; do
                echo "- Removing from group $G"
                aws iam remove-user-from-group --user-name "$U" --group-name "$G" || true
              done
              # Delete login profile if exists
              echo "- Deleting login profile (if any)"
              aws iam delete-login-profile --user-name "$U" || true
              # Finally delete the user
              echo "- Deleting user $U"
              aws iam delete-user --user-name "$U" || true
            done
            echo "üí§ Temporary IAM users cleaned up"
          fi

  hibernation_summary:
    name: "üò¥ Hibernation Summary"
    runs-on: ubuntu-latest
    needs: [validate_confirmation, cleanup_oidc_role, cleanup_state_bucket]
    if: always() && needs.validate_confirmation.outputs.confirmed == 'true'
    steps:
      - name: Generate Hibernation Summary
        run: |
          echo "## üò¥ Project Successfully Hibernated!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your project is now in cost-optimized hibernation mode." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ Resources Destroyed (No More Costs):" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ App Runner Service (compute costs eliminated)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ RDS Aurora Database (storage costs eliminated)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ VPC and Networking (NAT Gateway costs eliminated)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ ECR Repository (storage costs eliminated)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Admin IAM roles and policies" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Terraform state buckets and temporary users" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.cleanup_oidc_role }}" == "true" ]; then
            echo "### üîê Security Cleanup:" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.keep_oidc_provider }}" == "true" ]; then
              echo "- ‚úÖ Project OIDC role deleted" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Shared OIDC provider preserved (for other projects)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ‚úÖ Project OIDC role deleted" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Shared OIDC provider deleted" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### üîê OIDC Preserved:" >> $GITHUB_STEP_SUMMARY
            echo "- ‚ÑπÔ∏è OIDC role kept for easy reactivation" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Reactivation Process:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.cleanup_oidc_role }}" == "true" ]; then
            echo "**When you return (Complete Setup Required):**" >> $GITHUB_STEP_SUMMARY
            echo "1. **Create new S3 bucket**: \`${TF_VAR_PREFIX}-terraform-state-unique1029\` (versioned, encrypted)" >> $GITHUB_STEP_SUMMARY
            echo "2. **Create temp AWS user**: \`temp-setup-${TF_VAR_PREFIX}-$(date +%Y%m%d)\` with AdministratorAccess" >> $GITHUB_STEP_SUMMARY
            echo "3. **Update .initial_secrets**: Add new temp user credentials" >> $GITHUB_STEP_SUMMARY
            echo "4. **Run** \`./prepare_secrets.sh\` and update \`INITIAL_SECRETS_B64\` in GitHub" >> $GITHUB_STEP_SUMMARY
            echo "5. **Run** \`oidc-first-time-setup.yml\` (will reuse existing provider if available)" >> $GITHUB_STEP_SUMMARY
            echo "6. **Run** \`deploy-with-oidc.yml\` to recreate all resources" >> $GITHUB_STEP_SUMMARY
            echo "7. **Clean up** temp user and \`INITIAL_SECRETS_B64\` after successful deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "**When you return:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Simply run \`deploy-with-oidc.yml\` (OIDC already configured)" >> $GITHUB_STEP_SUMMARY
            echo "2. All resources will be recreated from scratch" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí° What's Preserved:" >> $GITHUB_STEP_SUMMARY
          echo "- üìÅ All code and configurations" >> $GITHUB_STEP_SUMMARY
          echo "- üîß GitHub repository and workflows" >> $GITHUB_STEP_SUMMARY
          echo "- üìã Infrastructure blueprints (Terraform modules)" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.keep_oidc_provider }}" == "true" ]; then
            echo "- üîê OIDC provider (if shared with other projects)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.cleanup_oidc_role }}" == "true" ]; then
            echo "### ‚ö†Ô∏è Manual S3 Cleanup (If Automated Failed):" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "If S3 bucket cleanup failed, manually delete with AWS CLI:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# List and delete all object versions:" >> $GITHUB_STEP_SUMMARY
            echo "aws s3api list-object-versions --bucket \"YOUR_PREFIX-terraform-state-unique1029\" \\" >> $GITHUB_STEP_SUMMARY
            echo "  --query 'Versions[].[Key,VersionId]' --output text | \\" >> $GITHUB_STEP_SUMMARY
            echo "  while read key version; do" >> $GITHUB_STEP_SUMMARY
            echo "    aws s3api delete-object --bucket \"YOUR_PREFIX-terraform-state-unique1029\" \\" >> $GITHUB_STEP_SUMMARY
            echo "      --key \"\$key\" --version-id \"\$version\"" >> $GITHUB_STEP_SUMMARY
            echo "  done" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Delete delete markers:" >> $GITHUB_STEP_SUMMARY
            echo "aws s3api list-object-versions --bucket \"YOUR_PREFIX-terraform-state-unique1029\" \\" >> $GITHUB_STEP_SUMMARY
            echo "  --query 'DeleteMarkers[].[Key,VersionId]' --output text | \\" >> $GITHUB_STEP_SUMMARY
            echo "  while read key version; do" >> $GITHUB_STEP_SUMMARY
            echo "    aws s3api delete-object --bucket \"YOUR_PREFIX-terraform-state-unique1029\" \\" >> $GITHUB_STEP_SUMMARY
            echo "      --key \"\$key\" --version-id \"\$version\"" >> $GITHUB_STEP_SUMMARY
            echo "  done" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Finally delete the empty bucket:" >> $GITHUB_STEP_SUMMARY
            echo "aws s3api delete-bucket --bucket \"YOUR_PREFIX-terraform-state-unique1029\"" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          echo "**üí∏ Estimated monthly savings: ~$100-500+ depending on your usage**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ **TRUE ZERO COST HIBERNATION ACHIEVED!** üéØ" >> $GITHUB_STEP_SUMMARY