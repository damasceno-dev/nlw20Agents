name: "Deploy AWS Infrastructure"

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      prefix:
        description: 'Prefix for AWS resources'
        required: true
        type: string
      admin_profile:
        description: 'Admin profile name'
        required: true
        type: string
      resources_creator_profile:
        description: 'Resources creator profile name'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  terraform_admin:
    name: "1-Terraform Admin"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.ENCODED_SECRETS }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables and Create tfvars
        run: |
          # Load environment variables from .secrets
          export $(cat .secrets | xargs)
          # Persist AWS credentials for subsequent steps
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "AWS_ADMIN_ACCESS_KEY_ID=${AWS_ADMIN_ACCESS_KEY_ID}" >> $GITHUB_ENV
          echo "AWS_ADMIN_SECRET_ACCESS_KEY=${AWS_ADMIN_SECRET_ACCESS_KEY}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          echo "TF_VAR_RESOURCES_CREATOR_PROFILE=${TF_VAR_RESOURCES_CREATOR_PROFILE}" >> $GITHUB_ENV
          # Create Terraform variable file using workflow inputs or secret defaults
          cat <<EOF > 1-admin/terraform.tfvars
          prefix = "${TF_VAR_PREFIX}"
          resources_creator_profile = "${TF_VAR_RESOURCES_CREATOR_PROFILE}"
          EOF
          
      - name: Install Dependencies (unzip and ca-certificates)
        run: |
          if [[ "$GITHUB_ACTIONS" == "true" ]]; then
            sudo apt-get update && sudo apt-get install -y unzip ca-certificates
          else
            apt-get update && apt-get install -y unzip ca-certificates
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ADMIN_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_ADMIN_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init & Apply (1-Admin)
        working-directory: 1-admin
        run: |
          terraform init -reconfigure
          terraform apply -auto-approve -var-file=terraform.tfvars

  terraform_resources:
    name: "2-Terraform Resources"
    runs-on: ubuntu-latest
    needs: terraform_admin
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.ENCODED_SECRETS }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Resources Creator Environment Variables and Create tfvars
        run: |
          export $(cat .secrets | xargs)
          # Set environment variables in GitHub Actions
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "AWS_RESOURCES_CREATOR_ACCESS_KEY_ID=${AWS_RESOURCES_CREATOR_ACCESS_KEY_ID}" >> $GITHUB_ENV
          echo "AWS_RESOURCES_CREATOR_SECRET_ACCESS_KEY=${AWS_RESOURCES_CREATOR_SECRET_ACCESS_KEY}" >> $GITHUB_ENV
          echo "TF_VAR_DB_PASSWORD=${TF_VAR_DB_PASSWORD}" >> $GITHUB_ENV
      
          # Mask the sensitive DB password in logs
          echo "::add-mask::$TF_VAR_DB_PASSWORD"
      
          # Create tfvars file for Terraform
          cat <<EOF > 2-resources/terraform.tfvars
          db_password = "${TF_VAR_DB_PASSWORD}"
          EOF

      - name: Install Dependencies (Resources) - unzip & ca-certificates
        run: |
          if [[ "$GITHUB_ACTIONS" == "true" ]]; then
            sudo apt-get update && sudo apt-get install -y unzip ca-certificates
          else
            apt-get update && apt-get install -y unzip ca-certificates
          fi

      - name: Setup Terraform (Resources)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (Resources)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_RESOURCES_CREATOR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_RESOURCES_CREATOR_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init & Apply (2-Resources)
        working-directory: 2-resources
        run: |
          terraform init -reconfigure
          terraform apply -auto-approve -var-file=terraform.tfvars
          
      - name: Retrieve Terraform Outputs
        id: tf_outputs
        working-directory: 2-resources
        run: |
          echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV
          echo "ECR_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
#          echo "S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV
#          echo "SQS_DELETE_USER_URL=$(terraform output -raw sqs_queue_url)" >> $GITHUB_ENV

      - name: Use Terraform Outputs
        run: |
          echo "RDS Endpoint: $RDS_ENDPOINT"
          echo "ECR Repository URL: $ECR_URL"
#          echo "S3 BUCKET NAME: $S3_BUCKET_NAME"
#          echo "SQS Delete User URL: $SQS_DELETE_USER_URL"
