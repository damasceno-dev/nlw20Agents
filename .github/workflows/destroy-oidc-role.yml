name: "Destroy OIDC Role (Project-Specific)"

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY-ROLE" to confirm deletion of this project\'s OIDC role'
        required: true
        type: string
      keep_oidc_provider:
        description: 'Keep the shared OIDC provider (recommended if other projects use it)'
        required: true
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read

jobs:
  validate_confirmation:
    name: "Validate Destroy Confirmation"
    runs-on: ubuntu-latest
    outputs:
      confirmed: ${{ steps.validate.outputs.confirmed }}
    steps:
      - name: Validate Confirmation
        id: validate
        run: |
          if [[ "${{ github.event.inputs.confirm_destroy }}" == "DESTROY-ROLE" ]]; then
            echo "confirmed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Destroy confirmed. Proceeding with OIDC role deletion..."
          else
            echo "confirmed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Confirmation failed. You must type 'DESTROY-ROLE' to proceed."
            exit 1
          fi

  destroy_role:
    name: "Destroy Project OIDC Role"
    runs-on: ubuntu-latest
    needs: validate_confirmation
    if: ${{ needs.validate_confirmation.outputs.confirmed == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create secrets files
        run: |
          # Create .secrets file with project configuration
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          # Load project configuration from .secrets (filter out comments and empty lines)
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          echo "GITHUB_ORG=${GITHUB_ORG}" >> $GITHUB_ENV
          echo "GITHUB_REPO=${GITHUB_REPO}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.TF_VAR_PREFIX }}-github-deploy-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DestroyRole

      - name: Check Current Role and OIDC Provider
        id: check_resources
        run: |
          echo "üîç Checking current OIDC resources..."
          
          ROLE_NAME="${TF_VAR_PREFIX}-github-deploy-role"
          if aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
            echo "role_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Found role to destroy: ${ROLE_NAME}"
          else
            echo "role_exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Role ${ROLE_NAME} does not exist"
          fi

          GITHUB_PROVIDER_ARN=$(aws iam list-open-id-connect-providers \
            --query 'OpenIDConnectProviderList[?contains(Arn, `token.actions.githubusercontent.com`)].Arn' \
            --output text || echo "")
          
          if [ -n "${GITHUB_PROVIDER_ARN}" ] && [ "${GITHUB_PROVIDER_ARN}" != "None" ]; then
            echo "oidc_provider_exists=true" >> $GITHUB_OUTPUT
            echo "oidc_provider_arn=${GITHUB_PROVIDER_ARN}" >> $GITHUB_OUTPUT
            echo "‚úÖ OIDC Provider exists: ${GITHUB_PROVIDER_ARN}"
          else
            echo "oidc_provider_exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No OIDC provider found"
          fi
        env:
          TF_VAR_PREFIX: ${{ env.TF_VAR_PREFIX }}

      - name: Configure Terraform Backend
        if: ${{ steps.check_resources.outputs.role_exists == 'true' }}
        working-directory: infra/1-oidc
        run: |
          # Configure S3 backend for Terraform state
          cat <<EOF > backend.tf
          terraform {
            backend "s3" {
              bucket = "${TF_VAR_PREFIX}-terraform-state-unique1029"
              key    = "oidc/terraform.tfstate"
              region = "${AWS_REGION}"
            }
          }
          EOF
        env:
          TF_VAR_PREFIX: ${{ env.TF_VAR_PREFIX }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Configure Terraform Variables
        if: ${{ steps.check_resources.outputs.role_exists == 'true' }}
        run: |
          # Create terraform.tfvars for destroy operation
          cat <<EOF > infra/1-oidc/terraform.tfvars
          prefix = "${TF_VAR_PREFIX}"
          github_org = "${GITHUB_ORG}"
          github_repo = "${GITHUB_REPO}"
          aws_region = "${AWS_REGION}"
          aws_account_id = "${AWS_ACCOUNT_ID}"
          oidc_provider_exists = ${{ steps.check_resources.outputs.oidc_provider_exists }}
          existing_oidc_provider_arn = "${{ steps.check_resources.outputs.oidc_provider_arn }}"
          EOF

      - name: Terraform Destroy (Role Only)
        if: ${{ steps.check_resources.outputs.role_exists == 'true' }}
        working-directory: infra/1-oidc
        run: |
          if [ "${{ github.event.inputs.keep_oidc_provider }}" == "true" ]; then
            echo "üóëÔ∏è Destroying only the project-specific role (keeping shared OIDC provider)..."
            terraform init -reconfigure
            
            # Target only the role and its attachments for destruction
            terraform destroy -auto-approve -var-file=terraform.tfvars \
              -target=aws_iam_role.github_deploy \
              -target=aws_iam_role_policy_attachment.attach_vpc \
              -target=aws_iam_role_policy_attachment.attach_rds \
              -target=aws_iam_role_policy_attachment.attach_ecr \
              -target=aws_iam_role_policy_attachment.attach_app_runner \
              -target=aws_iam_role_policy_attachment.attach_iam \
              -target=aws_iam_role_policy_attachment.attach_s3 \
              -target=aws_iam_role_policy_attachment.attach_cloudwatch \
              -target=aws_iam_role_policy_attachment.attach_sqs
          else
            echo "üóëÔ∏è Destroying project role AND shared OIDC provider..."
            terraform init -reconfigure
            terraform destroy -auto-approve -var-file=terraform.tfvars
          fi

      - name: Verify Destruction
        if: ${{ steps.check_resources.outputs.role_exists == 'true' }}
        run: |
          echo "üîç Verifying resource destruction..."
          
          ROLE_NAME="${TF_VAR_PREFIX}-github-deploy-role"
          if aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
            echo "‚ùå Role ${ROLE_NAME} still exists - destruction may have failed"
            exit 1
          else
            echo "‚úÖ Role ${ROLE_NAME} successfully destroyed"
          fi

          if [ "${{ github.event.inputs.keep_oidc_provider }}" == "false" ]; then
            GITHUB_PROVIDER_ARN=$(aws iam list-open-id-connect-providers \
              --query 'OpenIDConnectProviderList[?contains(Arn, `token.actions.githubusercontent.com`)].Arn' \
              --output text || echo "")
            
            if [ -n "${GITHUB_PROVIDER_ARN}" ] && [ "${GITHUB_PROVIDER_ARN}" != "None" ]; then
              echo "‚ùå OIDC Provider still exists - destruction may have failed"
              exit 1
            else
              echo "‚úÖ OIDC Provider successfully destroyed"
            fi
          fi
        env:
          TF_VAR_PREFIX: ${{ env.TF_VAR_PREFIX }}

      - name: No Role to Destroy
        if: ${{ steps.check_resources.outputs.role_exists == 'false' }}
        run: |
          echo "‚ÑπÔ∏è No OIDC role found for prefix '${TF_VAR_PREFIX}'"
          echo "The role may have already been destroyed or never created."
        env:
          TF_VAR_PREFIX: ${{ env.TF_VAR_PREFIX }}

  destroy_summary:
    name: "Destroy Summary"
    runs-on: ubuntu-latest
    needs: [validate_confirmation, destroy_role]
    if: always()
    steps:
      - name: Generate Destroy Summary
        run: |
          echo "## üóëÔ∏è OIDC Role Destruction Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.destroy_role.result }}" == "success" ]; then
            echo "### ‚úÖ Resources Destroyed:" >> $GITHUB_STEP_SUMMARY
            echo "- Project-specific IAM role and policy attachments" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ github.event.inputs.keep_oidc_provider }}" == "false" ]; then
              echo "- Shared GitHub OIDC provider" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Shared GitHub OIDC provider: **PRESERVED** (for other projects)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üßπ Manual Cleanup Still Required:" >> $GITHUB_STEP_SUMMARY
            echo "1. **S3 Bucket**: Manually delete \`${TF_VAR_PREFIX}-terraform-state-unique1029\` if no longer needed" >> $GITHUB_STEP_SUMMARY
            echo "2. **Application Resources**: Run the main destroy workflow to clean up VPC, RDS, App Runner, etc." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Destruction Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi
        env:
          TF_VAR_PREFIX: ${{ secrets.TF_VAR_PREFIX || 'unknown' }}