name: "Deploy with OIDC"

on:
  workflow_dispatch:
    inputs:
      deploy_infra:
        description: 'Deploy Infrastructure'
        required: false
        type: boolean
        default: true
      deploy_server:
        description: 'Deploy Server'
        required: false
        type: boolean
        default: true
      deploy_app_runner:
        description: 'Deploy App Runner'
        required: false
        type: boolean
        default: true
      deploy_amplify:
        description: 'Deploy Amplify'
        required: false
        type: boolean
        default: true
      update_backend_cors:
        description: 'Check CORS status (CORS is handled by Terraform)'
        required: false
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read

jobs:
  # ==========================================
  # STAGE 1: Infrastructure Deployment
  # ==========================================
  get_oidc_credentials:
    name: "Setup OIDC Credentials"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_infra != 'false' }}
    outputs:
      credentials_ready: ${{ steps.completion.outputs.done }}
      oidc_role_arn: ${{ steps.construct_role_arn.outputs.role_arn }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "GITHUB_ORG=${GITHUB_ORG}" >> $GITHUB_ENV
          echo "GITHUB_REPO=${GITHUB_REPO}" >> $GITHUB_ENV

      - name: Construct OIDC Role ARN
        id: construct_role_arn
        run: |
          OIDC_ROLE_ARN="arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.TF_VAR_PREFIX }}-github-deploy-role"
          echo "role_arn=${OIDC_ROLE_ARN}" >> $GITHUB_OUTPUT
          echo "OIDC_ROLE_ARN=${OIDC_ROLE_ARN}" >> $GITHUB_ENV
          echo "✅ Constructed OIDC Role ARN: ${OIDC_ROLE_ARN}"

      - name: Test OIDC Authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.construct_role_arn.outputs.role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployTest

      - name: Verify AWS Access
        run: |
          echo "🧪 Testing AWS access with OIDC credentials..."
          aws sts get-caller-identity
          echo "✅ OIDC credentials working!"

      - name: Mark Completion
        id: completion
        run: echo "done=true" >> $GITHUB_OUTPUT

  deploy_resources:
    name: "Deploy AWS Resources"
    runs-on: ubuntu-latest
    needs: get_oidc_credentials
    if: ${{ github.event.inputs.deploy_infra != 'false' }}
    outputs:
      aurora_endpoint: ${{ steps.tf_outputs.outputs.aurora_endpoint }}
      ecr_url: ${{ steps.tf_outputs.outputs.ecr_url }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Resources Creator Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_DB_PASSWORD=${TF_VAR_DB_PASSWORD}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          
          echo "::add-mask::$TF_VAR_DB_PASSWORD"
          
          cat <<EOF > infra/2-resources/terraform.tfvars
          prefix = "${TF_VAR_PREFIX}"
          db_password = "${TF_VAR_DB_PASSWORD}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.get_oidc_credentials.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployResources

      - name: Configure Terraform Backend (Resources)
        working-directory: infra/2-resources
        run: |
          # Configure S3 backend for Terraform state dynamically
          cat <<EOF > backend.tf
          terraform {
            backend "s3" {
              bucket = "${TF_VAR_PREFIX}-terraform-state-unique1029"
              key    = "2-resources/terraform.tfstate"
              region = "${AWS_REGION}"
              encrypt = true
            }
          }
          EOF
        env:
          TF_VAR_PREFIX: ${{ env.TF_VAR_PREFIX }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Terraform Init & Apply (Resources)
        working-directory: infra/2-resources
        run: |
          terraform init -reconfigure
          terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Retrieve Terraform Outputs
        id: tf_outputs
        working-directory: infra/2-resources
        run: |
          AURORA_ENDPOINT=$(terraform output -raw aurora_cluster_endpoint)
          ECR_URL=$(terraform output -raw ecr_repository_url)
          echo "aurora_endpoint=${AURORA_ENDPOINT}" >> $GITHUB_OUTPUT
          echo "ecr_url=${ECR_URL}" >> $GITHUB_OUTPUT
          echo "AURORA_ENDPOINT=${AURORA_ENDPOINT}" >> $GITHUB_ENV
          echo "ECR_URL=${ECR_URL}" >> $GITHUB_ENV

      - name: Display Outputs
        run: |
          echo "Aurora Endpoint: ${{ env.AURORA_ENDPOINT }}"
          echo "ECR Repository URL: ${{ env.ECR_URL }}"

  # ==========================================
  # STAGE 2: Server Deployment (Docker to ECR)
  # ==========================================
  deploy_server:
    name: "Build and Deploy Server to ECR"
    runs-on: ubuntu-latest
    needs: [get_oidc_credentials, deploy_resources]
    if: ${{ github.event.inputs.deploy_server != 'false' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Generate appsettings.Production.json
        run: |
          # Load environment variables
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          
          # Get infrastructure outputs from previous job
          AURORA_ENDPOINT="${{ needs.deploy_resources.outputs.aurora_endpoint }}"
          ECR_URL="${{ needs.deploy_resources.outputs.ecr_url }}"
          
          # Create appsettings.Production.json dynamically
          cat <<EOF > server/server.API/appsettings.Production.json
          {
            "ConnectionStrings": {
              "DefaultConnection": "Host=${AURORA_ENDPOINT};Database=${DB_NAME};Username=${DB_USERNAME};Password=${TF_VAR_DB_PASSWORD}"
            },
            "Logging": {
              "LogLevel": {
                "Default": "Information",
                "Microsoft.AspNetCore": "Warning"
              }
            },
            "OpenAI": {
              "ApiKey": "${OPENAI_API_KEY}"
            },
            "AwsCredentials": {
              "AwsDefaultRegion": "${AWS_REGION}",
              "AwsRegion": "${AWS_REGION}",
              "AwsEcrUrl": "${ECR_URL}",
              "UseOIDC": true
            }
          }
          EOF
          
          # Validate JSON
          jq . server/server.API/appsettings.Production.json
          
          # Set environment variables
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "ECR_URL=${ECR_URL}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get short commit hash
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short=7 HEAD)" >> $GITHUB_ENV

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.get_oidc_credentials.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployServer

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        working-directory: server
        run: |
          # Build the Docker image
          docker build -t ${{ env.ECR_URL }}:latest -t ${{ env.ECR_URL }}:${{ env.SHORT_SHA }} -f Dockerfile .
          
          # Push both tags
          docker push ${{ env.ECR_URL }}:latest
          docker push ${{ env.ECR_URL }}:${{ env.SHORT_SHA }}

      - name: Verify Pushed Images
        run: |
          echo "Successfully pushed images to ECR:"
          echo " - ${{ env.ECR_URL }}:latest"
          echo " - ${{ env.ECR_URL }}:${{ env.SHORT_SHA }}"
          
          REPO_NAME=$(echo ${{ env.ECR_URL }} | awk -F'/' '{print $NF}')
          aws ecr list-images --repository-name ${REPO_NAME} --region ${{ env.AWS_REGION }}

  # ==========================================
  # STAGE 3: App Runner Deployment
  # ==========================================
  deploy_app_runner:
    name: "Deploy App Runner"
    runs-on: ubuntu-latest
    needs: [get_oidc_credentials, deploy_resources, deploy_server]
    if: ${{ github.event.inputs.deploy_app_runner != 'false' }}
    outputs:
      app_runner_url: ${{ steps.get_url.outputs.app_runner_url }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          
          # Create terraform.tfvars for App Runner
          cat <<EOF > infra/3-apprunner/terraform.tfvars
          prefix = "${TF_VAR_PREFIX}"
          configure_cors = true
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.get_oidc_credentials.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployAppRunner

      - name: Wait for App Runner to be stable
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.TF_VAR_PREFIX }}-app-runner'].ServiceArn" --output text)
          if [ -n "$SERVICE_ARN" ]; then
            echo "Found existing service: $SERVICE_ARN. Waiting for it to be stable..."
            aws apprunner wait service-stable --service-arn "$SERVICE_ARN"
          else
            echo "No existing service found, skipping wait."
          fi

      - name: Configure Terraform Backend (App Runner)
        working-directory: infra/3-apprunner
        run: |
          # Configure S3 backend for Terraform state dynamically
          cat <<EOF > backend.tf
          terraform {
            backend "s3" {
              bucket = "${TF_VAR_PREFIX}-terraform-state-unique1029"
              key    = "3-apprunner/terraform.tfstate"
              region = "${AWS_REGION}"
              encrypt = true
            }
          }
          EOF
        env:
          TF_VAR_PREFIX: ${{ env.TF_VAR_PREFIX }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Terraform Init & Apply (App Runner)
        working-directory: infra/3-apprunner
        run: |
          terraform init -reconfigure
          terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Retrieve App Runner URL
        id: get_url
        working-directory: infra/3-apprunner
        run: |
          APP_RUNNER_URL=$(terraform output -raw app_runner_service_url)
          echo "App Runner URL: ${APP_RUNNER_URL}"
          echo "APP_RUNNER_URL=${APP_RUNNER_URL}" >> $GITHUB_ENV
          echo "app_runner_url=${APP_RUNNER_URL}" >> $GITHUB_OUTPUT

  # ==========================================
  # STAGE 4: Amplify Deployment
  # ==========================================
  deploy_amplify:
    name: "Deploy Amplify"
    runs-on: ubuntu-latest
    needs: [get_oidc_credentials, deploy_resources, deploy_server, deploy_app_runner]
    if: ${{ github.event.inputs.deploy_amplify != 'false' }}
    outputs:
      amplify_url: ${{ steps.get_amplify_url.outputs.amplify_url }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          echo "GITHUB_ORG=${GITHUB_ORG}" >> $GITHUB_ENV
          echo "GITHUB_REPO=${GITHUB_REPO}" >> $GITHUB_ENV
          echo "GH_PAT=${GH_PAT}" >> $GITHUB_ENV
          
          # Create terraform.tfvars for Amplify
          cat <<EOF > infra/4-amplify/terraform.tfvars
          prefix = "${TF_VAR_PREFIX}"
          github_repository = "https://github.com/${GITHUB_ORG}/${GITHUB_REPO}"
          branch_name = "main"
          github_access_token = "${GH_PAT}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.get_oidc_credentials.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployAmplify

      - name: Configure Terraform Backend (Amplify)
        working-directory: infra/4-amplify
        run: |
          # Configure S3 backend for Terraform state dynamically
          cat <<EOF > backend.tf
          terraform {
            backend "s3" {
              bucket = "${TF_VAR_PREFIX}-terraform-state-unique1029"
              key    = "4-amplify/terraform.tfstate"
              region = "${AWS_REGION}"
              encrypt = true
            }
          }
          EOF
        env:
          TF_VAR_PREFIX: ${{ env.TF_VAR_PREFIX }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Get App Runner URL and Update Config
        run: |
          # Get the App Runner URL from the previous job output
          APP_RUNNER_URL="${{ needs.deploy_app_runner.outputs.app_runner_url }}"
          
          if [ -n "$APP_RUNNER_URL" ] && [ "$APP_RUNNER_URL" != "" ]; then
            echo "Retrieved App Runner URL from job output: ${APP_RUNNER_URL}"
            
            # Update the Amplify terraform.tfvars with the App Runner URL
            cat <<EOF >> infra/4-amplify/terraform.tfvars
          app_runner_url = "${APP_RUNNER_URL}"
          EOF
            
            echo "APP_RUNNER_URL=${APP_RUNNER_URL}" >> $GITHUB_ENV
          else
            echo "No App Runner URL available, proceeding without backend integration"
            echo "APP_RUNNER_URL=" >> $GITHUB_ENV
          fi

      - name: Terraform Init & Apply (Amplify)
        working-directory: infra/4-amplify
        run: |
          terraform init -reconfigure
          terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Retrieve Amplify URL
        id: get_amplify_url
        working-directory: infra/4-amplify
        run: |
          AMPLIFY_APP_URL=$(terraform output -raw amplify_app_url)
          echo "Amplify App URL: ${AMPLIFY_APP_URL}"
          echo "AMPLIFY_APP_URL=${AMPLIFY_APP_URL}" >> $GITHUB_ENV
          echo "amplify_url=${AMPLIFY_APP_URL}" >> $GITHUB_OUTPUT

  # ==========================================
  # STAGE 5: CORS Configuration (handled by Terraform)
  # ==========================================
  cors_status:
    name: "CORS Status Check"
    runs-on: ubuntu-latest
    needs: [get_oidc_credentials, deploy_app_runner, deploy_amplify]
    if: ${{ github.event.inputs.update_backend_cors != 'false' && needs.deploy_app_runner.result == 'success' && needs.deploy_amplify.result == 'success' }}
    steps:
      - name: CORS Status
        run: |
          echo "🔒 CORS Configuration Status:"
          echo "✅ CORS is now handled automatically by Terraform"
          echo "✅ No manual intervention required"
          echo "✅ Terraform manages timing and state properly"
          echo "✅ CORS will be configured on next deployment if needed"
  # ==========================================
  # FINAL SUMMARY
  # ==========================================
  deployment_summary:
    name: "Deployment Summary"
    runs-on: ubuntu-latest
    needs: [get_oidc_credentials, deploy_resources, deploy_server, deploy_app_runner, deploy_amplify, cors_status]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## 🚀 OIDC Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy_app_runner.result }}" == "success" ]; then
            echo "### 🚀 App Runner Backend API" >> $GITHUB_STEP_SUMMARY
            APP_RUNNER_URL="${{ needs.deploy_app_runner.outputs.app_runner_url }}"
            if [ -n "$APP_RUNNER_URL" ]; then
              echo "🔗 **Backend API**: https://${APP_RUNNER_URL}" >> $GITHUB_STEP_SUMMARY
              echo "📊 **Swagger API Docs**: https://${APP_RUNNER_URL}/swagger" >> $GITHUB_STEP_SUMMARY
            else
              echo "🔗 Backend API: Deployed successfully" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy_amplify.result }}" == "success" ]; then
            echo "### 🌐 Amplify Frontend Web App" >> $GITHUB_STEP_SUMMARY
            AMPLIFY_URL="${{ needs.deploy_amplify.outputs.amplify_url }}"
            if [ -n "$AMPLIFY_URL" ]; then
              echo "🔗 **Web Application**: ${AMPLIFY_URL}" >> $GITHUB_STEP_SUMMARY
            else
              echo "🔗 **Web Application**: Check Amplify console for URL" >> $GITHUB_STEP_SUMMARY
            fi
            echo "💡 **Note**: First deployment may take a few minutes to complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Note about CORS configuration
          echo "### 🔒 CORS Configuration" >> $GITHUB_STEP_SUMMARY
          echo "✅ CORS is managed by Terraform infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "✅ Automatic configuration with proper timing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ✅ Deployed with OIDC" >> $GITHUB_STEP_SUMMARY
          echo "- No AWS credentials stored in GitHub" >> $GITHUB_STEP_SUMMARY
          echo "- Temporary credentials (1 hour TTL)" >> $GITHUB_STEP_SUMMARY
          echo "- Automatic credential rotation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🧹 Next Steps: Clean Up Temporary Secrets" >> $GITHUB_STEP_SUMMARY
          echo "Your deployment is complete! You can now safely remove temporary AWS credentials:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Remove temporary AWS credentials (no longer needed)" >> $GITHUB_STEP_SUMMARY
          echo "rm .initial_secrets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Remove encoded secret files (if still present)" >> $GITHUB_STEP_SUMMARY
          echo "rm -f .initial_secrets.b64 .secrets.b64" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Important**: Keep your \`.secrets\` file safe - it contains your permanent project configuration!" >> $GITHUB_STEP_SUMMARY