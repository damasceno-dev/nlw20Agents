name: "Deploy with OIDC"

on:
  workflow_dispatch:
    inputs:
      deploy_infra:
        description: 'Deploy Infrastructure'
        required: false
        type: boolean
        default: true
      deploy_server:
        description: 'Deploy Server'
        required: false
        type: boolean
        default: true
      deploy_app_runner:
        description: 'Deploy App Runner'
        required: false
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read

jobs:
  # ==========================================
  # STAGE 1: Infrastructure Deployment
  # ==========================================
  deploy_admin:
    name: "Deploy Admin Infrastructure"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_infra != 'false' }}
    outputs:
      admin_complete: ${{ steps.completion.outputs.done }}
      oidc_role_arn: ${{ steps.get_oidc_role.outputs.role_arn }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables and Create tfvars
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_PREFIX=${TF_VAR_PREFIX}" >> $GITHUB_ENV
          echo "GITHUB_ORG=${GITHUB_ORG}" >> $GITHUB_ENV
          echo "GITHUB_REPO=${GITHUB_REPO}" >> $GITHUB_ENV
          
          cat <<EOF > infra/1-admin/terraform.tfvars
          prefix = "${TF_VAR_PREFIX}"
          resources_creator_profile = "resources-creator"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Get OIDC Role ARN
        id: get_oidc_role
        working-directory: infra/1-oidc
        run: |
          terraform init -reconfigure
          OIDC_ROLE_ARN=$(terraform output -raw github_role_arn)
          echo "role_arn=${OIDC_ROLE_ARN}" >> $GITHUB_OUTPUT
          echo "OIDC_ROLE_ARN=${OIDC_ROLE_ARN}" >> $GITHUB_ENV

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.get_oidc_role.outputs.role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployAdmin

      - name: Terraform Init & Apply (Admin)
        working-directory: infra/1-admin
        run: |
          terraform init -reconfigure
          terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Mark Completion
        id: completion
        run: echo "done=true" >> $GITHUB_OUTPUT

  deploy_resources:
    name: "Deploy AWS Resources"
    runs-on: ubuntu-latest
    needs: deploy_admin
    if: ${{ github.event.inputs.deploy_infra != 'false' }}
    outputs:
      aurora_endpoint: ${{ steps.tf_outputs.outputs.aurora_endpoint }}
      ecr_url: ${{ steps.tf_outputs.outputs.ecr_url }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Resources Creator Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_DB_PASSWORD=${TF_VAR_DB_PASSWORD}" >> $GITHUB_ENV
          
          echo "::add-mask::$TF_VAR_DB_PASSWORD"
          
          cat <<EOF > infra/2-resources/terraform.tfvars
          db_password = "${TF_VAR_DB_PASSWORD}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.deploy_admin.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployResources

      - name: Terraform Init & Apply (Resources)
        working-directory: infra/2-resources
        run: |
          terraform init -reconfigure
          terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Retrieve Terraform Outputs
        id: tf_outputs
        working-directory: infra/2-resources
        run: |
          AURORA_ENDPOINT=$(terraform output -raw aurora_cluster_endpoint)
          ECR_URL=$(terraform output -raw ecr_repository_url)
          echo "aurora_endpoint=${AURORA_ENDPOINT}" >> $GITHUB_OUTPUT
          echo "ecr_url=${ECR_URL}" >> $GITHUB_OUTPUT
          echo "AURORA_ENDPOINT=${AURORA_ENDPOINT}" >> $GITHUB_ENV
          echo "ECR_URL=${ECR_URL}" >> $GITHUB_ENV

      - name: Display Outputs
        run: |
          echo "Aurora Endpoint: ${{ env.AURORA_ENDPOINT }}"
          echo "ECR Repository URL: ${{ env.ECR_URL }}"

  # ==========================================
  # STAGE 2: Server Deployment (Docker to ECR)
  # ==========================================
  deploy_server:
    name: "Build and Deploy Server to ECR"
    runs-on: ubuntu-latest
    needs: [deploy_admin, deploy_resources]
    if: ${{ github.event.inputs.deploy_server != 'false' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Generate appsettings.Production.json
        run: |
          # Load environment variables
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          
          # Get infrastructure outputs from previous job
          AURORA_ENDPOINT="${{ needs.deploy_resources.outputs.aurora_endpoint }}"
          ECR_URL="${{ needs.deploy_resources.outputs.ecr_url }}"
          
          # Create appsettings.Production.json dynamically
          cat <<EOF > server/server.API/appsettings.Production.json
          {
            "ConnectionStrings": {
              "DefaultConnection": "Host=${AURORA_ENDPOINT};Database=${DB_NAME};Username=${DB_USERNAME};Password=${TF_VAR_DB_PASSWORD}"
            },
            "Logging": {
              "LogLevel": {
                "Default": "Information",
                "Microsoft.AspNetCore": "Warning"
              }
            },
            "OpenAI": {
              "ApiKey": "PLACEHOLDER_WILL_USE_OIDC_FOR_SECRETS_MANAGER"
            },
            "AwsCredentials": {
              "AwsDefaultRegion": "${AWS_REGION}",
              "AwsRegion": "${AWS_REGION}",
              "AwsEcrUrl": "${ECR_URL}",
              "UseOIDC": true
            }
          }
          EOF
          
          # Validate JSON
          jq . server/server.API/appsettings.Production.json
          
          # Set environment variables
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "ECR_URL=${ECR_URL}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get short commit hash
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short=7 HEAD)" >> $GITHUB_ENV

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.deploy_admin.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployServer

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        working-directory: server
        run: |
          # Build the Docker image
          docker build -t ${{ env.ECR_URL }}:latest -t ${{ env.ECR_URL }}:${{ env.SHORT_SHA }} -f Dockerfile .
          
          # Push both tags
          docker push ${{ env.ECR_URL }}:latest
          docker push ${{ env.ECR_URL }}:${{ env.SHORT_SHA }}

      - name: Verify Pushed Images
        run: |
          echo "Successfully pushed images to ECR:"
          echo " - ${{ env.ECR_URL }}:latest"
          echo " - ${{ env.ECR_URL }}:${{ env.SHORT_SHA }}"
          
          REPO_NAME=$(echo ${{ env.ECR_URL }} | awk -F'/' '{print $NF}')
          aws ecr list-images --repository-name ${REPO_NAME} --region ${{ env.AWS_REGION }}

  # ==========================================
  # STAGE 3: App Runner Deployment
  # ==========================================
  deploy_app_runner:
    name: "Deploy App Runner"
    runs-on: ubuntu-latest
    needs: [deploy_admin, deploy_resources, deploy_server]
    if: ${{ github.event.inputs.deploy_app_runner != 'false' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .secrets file
        run: |
          echo "${{ secrets.SECRETS_B64 }}" | base64 -d > .secrets
          chmod 600 .secrets

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .secrets | grep -v '^$' | xargs)
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.deploy_admin.outputs.oidc_role_arn }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployAppRunner

      - name: Terraform Init & Apply (App Runner)
        working-directory: infra/3-apprunner
        run: |
          terraform init -reconfigure
          terraform apply -auto-approve

      - name: Retrieve App Runner URL
        working-directory: infra/3-apprunner
        run: |
          APP_RUNNER_URL=$(terraform output -raw app_runner_service_url)
          echo "App Runner URL: ${APP_RUNNER_URL}"
          echo "APP_RUNNER_URL=${APP_RUNNER_URL}" >> $GITHUB_ENV

      - name: Summary
        run: |
          echo "## 🚀 OIDC Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### App Runner URL" >> $GITHUB_STEP_SUMMARY
          echo "🔗 https://${{ env.APP_RUNNER_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Deployed with OIDC" >> $GITHUB_STEP_SUMMARY
          echo "- No AWS credentials stored in GitHub" >> $GITHUB_STEP_SUMMARY
          echo "- Temporary credentials (1 hour TTL)" >> $GITHUB_STEP_SUMMARY
          echo "- Automatic credential rotation" >> $GITHUB_STEP_SUMMARY